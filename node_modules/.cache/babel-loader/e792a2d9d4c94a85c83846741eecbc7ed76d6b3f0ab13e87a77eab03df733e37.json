{"ast":null,"code":"import axios from 'axios';\n\n// Cria uma instância do Axios para a configuração centralizada\nconst api = axios.create({\n  baseURL: 'http://localhost:3000',\n  // URL da sua API\n  timeout: 5000,\n  // Tempo de espera (5 segundos)\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;\n\n// Função para buscar os clientes\nexport const getClientes = async () => {\n  try {\n    const response = await api.get('/clientes'); // Altere para o endpoint correto\n    return response.data; // Retorna os dados recebidos da API\n  } catch (error) {\n    // Log de erro no console\n    console.error('Erro ao buscar os clientes:', error);\n\n    // Tratamento do erro para retornar uma mensagem mais amigável\n    if (error.response) {\n      // A resposta foi recebida, mas o servidor retornou um código de erro\n      throw new Error(`Erro na requisição: ${error.response.status} - ${error.response.data.message}`);\n    } else if (error.request) {\n      // A requisição foi feita, mas não houve resposta\n      throw new Error('Erro na requisição: O servidor não respondeu.');\n    } else {\n      // Erro ao configurar a requisição\n      throw new Error(`Erro desconhecido: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","getClientes","response","get","data","error","console","Error","status","message","request"],"sources":["C:/Users/user/Desktop/crud/front_end_avaliacao/src/service/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Cria uma instância do Axios para a configuração centralizada\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3000', // URL da sua API\r\n  timeout: 5000, // Tempo de espera (5 segundos)\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport default api;\r\n\r\n// Função para buscar os clientes\r\nexport const getClientes = async () => {\r\n  try {\r\n    const response = await api.get('/clientes'); // Altere para o endpoint correto\r\n    return response.data; // Retorna os dados recebidos da API\r\n  } catch (error) {\r\n    // Log de erro no console\r\n    console.error('Erro ao buscar os clientes:', error);\r\n\r\n    // Tratamento do erro para retornar uma mensagem mais amigável\r\n    if (error.response) {\r\n      // A resposta foi recebida, mas o servidor retornou um código de erro\r\n      throw new Error(`Erro na requisição: ${error.response.status} - ${error.response.data.message}`);\r\n    } else if (error.request) {\r\n      // A requisição foi feita, mas não houve resposta\r\n      throw new Error('Erro na requisição: O servidor não respondeu.');\r\n    } else {\r\n      // Erro ao configurar a requisição\r\n      throw new Error(`Erro desconhecido: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,IAAI;EAAE;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeJ,GAAG;;AAElB;AACA,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;;IAEnD;IACA,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClB;MACA,MAAM,IAAIK,KAAK,CAAC,uBAAuBF,KAAK,CAACH,QAAQ,CAACM,MAAM,MAAMH,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACK,OAAO,EAAE,CAAC;IAClG,CAAC,MAAM,IAAIJ,KAAK,CAACK,OAAO,EAAE;MACxB;MACA,MAAM,IAAIH,KAAK,CAAC,+CAA+C,CAAC;IAClE,CAAC,MAAM;MACL;MACA,MAAM,IAAIA,KAAK,CAAC,sBAAsBF,KAAK,CAACI,OAAO,EAAE,CAAC;IACxD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}